# ワーカーのプロセス数
worker_processes  1;

# errorファイルの場所とログレベルの指定。ログレベル指定なしの場合は、error以上を出力する。
error_log  logs/error.log;
error_log  logs/error.log  notice;
error_log  logs/error.log  info;

# マスタープロセスのPIDを出力するPIDファイルのパスを指定。
pid        logs/nginx.pid;


events {
    # 1つのワーカーが処理できるコネクション数を指定する。
    worker_connections  1024;
}


http {
    # MIMEタイプの関連付けリストをinclude
    include       mime.types;

    # MIMEタイプが不明の場合に用いられる
    default_type  application/octet-stream;

    # ログファイルの書式を指定し、その書式に名前をつける。
    # ここでは main という書式を作成している。
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    # アクセスログのパスと、その書式を指定する。書式の指定には、log_formatして定義したものを使用する。
    access_log  logs/access.log  main;

    log_format   debug   'time:$time_local\t'    # 時刻
                         'status:$status\t'      # ステータス
                         'host:$host\t'
                         'value:$file';

    access_log   logs/debug.log  debug;

    # クライアントと常時接続する時間を指定する。
    keepalive_timeout  65;

    # ---------------------------------------------
    # 以下高速化のためのオプション。問題ない限りonで良い。
    #
    # 内部的にsendfile()システムコールを用いるかどうかを指定する。
    sendfile       on;
    # sendfileディレクティブ友好時に、TCP_NOPUSHオプションを有効にするかどうか指定する。
    # 有効にすると、もっとも大きなパケットサイズで送信する。
    # tcp_nopush     on;

    # TCP_NODELAYオプションを有効にするかどうか指定する。
    # 有効にすると、小さなパケットを待たずに送信する。
    # tcp_nodelay          on;
    # ---------------------------------------------

    server {
        listen       80;
        server_name  localhost;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;

        location / {
            # root   html;
            # index  index.html index.htm;
            root   /usr/share/nginx/html;
            index  sample2.html;
        }

        location /sample.html {
            root   /usr/share/nginx/html;
            index  sample.html;
        }

        error_page  404              /404.html;
        location = /404.html {
            root   html;
        }

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # リバースプロキシ
        # /images/**にアクセスした時に処理
        # location ~ /images/(.+)$ {
        #     resolver       8.8.8.8 valid=5s;
        #     set $s3_host    "s3.ap-northeast-1.amazonaws.com";
        #     set $s3_bucket  "nzzzz27.public-bucket/images";
        #     set $url_full $1;
        #     # 転送先
        #     proxy_pass    http://$s3_host/$s3_bucket/$url_full;

        #     break;
        # }

        small_light on;
        location ~ ^/small_light[^/]*/(.+)$ {
            set $file $1;

            proxy_pass http://s3.ap-northeast-1.amazonaws.com;
            rewrite ^  /nzzzz27.public-bucket/$file;
            break;
        }

        # small_light on;
        # location ~ /small_light[^/]*/(.+)$ {
        #     # $1には、(.+)部分が入る
        #     set $file $1;
        #     set $file2 $2;
        #     set $s3_host    "s3.ap-northeast-1.amazonaws.com";
        #     set $s3_bucket  "nzzzz27.public-bucket";

        #     rewrite ^ s3.ap-northeast-1.amazonaws.com/nzzzz27.public-bucket/images/0001/cat.jpg
        #     # rewrite ^ /$s3_host/$s3_bucket/$file;
        #     rewrite ~small_light[^/]*/ $s3_host/$s3_bucket/$file2;
        #     break;
        # }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
